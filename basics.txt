1. Lag features are values at prior timesteps that are considered useful because they are created on 
the assumption that what happened in the past can influence or contain a sort of intrinsic information 
about the future. For example, it can be beneficial to generate features for sales that happened in 
previous days at 4:00 p.m. if you want to predict similar sales at 4:00 p.m. the next day.

2. overfitting/underfitting
In practice, it's not uncommon for a tree to have 10 splits between the top level (all houses) and a leaf.
As the tree gets deeper, the dataset gets sliced up into leaves with fewer houses. 
If a tree only had 1 split, it divides the data into 2 groups. If each group is split again, 
we would get 4 groups of houses. Splitting each of those again would create 8 groups. 
If we keep doubling the number of groups by adding more splits at each level, we'll have  
210  groups of houses by the time we get to the 10th level. That's 1024 leaves.

When we divide the houses amongst many leaves, we also have fewer houses in each leaf. 
Leaves with very few houses will make predictions that are quite close to those homes' actual values, 
but they may make very unreliable predictions for new data (because each prediction is based on only a few houses).

This is a phenomenon called overfitting, where a model matches the training data almost perfectly, 
but does poorly in validation and other new data. On the flip side, if we make our tree very shallow, 
it doesn't divide up the houses into very distinct groups.

At an extreme, if a tree divides houses into only 2 or 4, each group still has a wide variety of houses. 
Resulting predictions may be far off for most houses, even in the training data (and it will be bad in 
validation too for the same reason). When a model fails to capture important distinctions and patterns 
in the data, so it performs poorly even in training data, that is called underfitting.